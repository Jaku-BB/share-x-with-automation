name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run Biome check (lint + format)
      run: npm run check:ci
    
    - name: Run tests
      run: npm run test
    
    - name: Build application
      run: npm run build
    
    - name: Run type check
      run: npm run type-check

  e2e:
    name: End-to-End Testing
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'
    
    - name: Install frontend dependencies
      working-directory: ./client
      run: npm ci
    
    - name: Build frontend
      working-directory: ./client
      run: npm run build
    
    - name: Setup database schema
      run: |
        PGPASSWORD=testpassword psql -h localhost -U testuser -d testdb -f server/src/main/resources/session-schema.sql
    
    - name: Start backend
      working-directory: ./server
      run: |
        export SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/testdb
        export SPRING_DATASOURCE_USERNAME=testuser
        export SPRING_DATASOURCE_PASSWORD=testpassword
        mvn spring-boot:run -Dcheckstyle.skip=true -Dmaven.test.skip=true &
        
        echo "Waiting for backend to start..."
        for i in {1..30}; do
          if curl -s http://localhost:8081/ >/dev/null 2>&1; then
            echo "Backend started successfully"
            break
          fi
          sleep 2
        done
    
    - name: Start frontend
      working-directory: ./client
      run: |
        npm run start &
        
        echo "Waiting for frontend to start..."
        for i in {1..30}; do
          if curl -s http://localhost:3000/ >/dev/null 2>&1; then
            echo "Frontend started successfully"
            break
          fi
          sleep 2
        done
    
    - name: Run E2E tests
      run: |
        chmod +x scripts/ci-test.sh
        scripts/ci-test.sh
        
        echo "🔍 Testing frontend-backend integration..."
        # Test that frontend can reach backend
        frontend_response=$(curl -s http://localhost:3000/)
        if echo "$frontend_response" | grep -q "ShareX\|html"; then
          echo "✅ Frontend serving content"
        else
          echo "❌ Frontend not serving properly"
          exit 1
        fi

  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'
      continue-on-error: false
    

    
    - name: Run tests
      run: mvn test -Dspring.profiles.active=test
    
    - name: Run Checkstyle
      run: mvn checkstyle:check
      continue-on-error: true
    
    - name: Build application
      run: mvn clean compile -Dcheckstyle.skip=true
    
    - name: Package application
      run: mvn package -DskipTests -Dcheckstyle.skip=true
    
    - name: Start application for integration tests
      run: |
        # Start application in background
        export SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/testdb
        export SPRING_DATASOURCE_USERNAME=testuser
        export SPRING_DATASOURCE_PASSWORD=testpassword
        mvn spring-boot:run -Dcheckstyle.skip=true -Dmaven.test.skip=true &
        APP_PID=$!
        echo "APP_PID=$APP_PID" >> $GITHUB_ENV
        
        # Wait for app to start
        echo "Waiting for application to start..."
        for i in {1..30}; do
          if curl -s http://localhost:8081/ >/dev/null 2>&1; then
            echo "Application started successfully"
            break
          fi
          sleep 2
        done
    
    - name: Setup PostgreSQL schema for integration tests
      run: |
        # Create session tables
        PGPASSWORD=testpassword psql -h localhost -U testuser -d testdb -c "
        CREATE TABLE IF NOT EXISTS SPRING_SESSION (
            PRIMARY_ID CHAR(36) NOT NULL,
            SESSION_ID CHAR(36) NOT NULL,
            CREATION_TIME BIGINT NOT NULL,
            LAST_ACCESS_TIME BIGINT NOT NULL,
            MAX_INACTIVE_INTERVAL INT NOT NULL,
            EXPIRY_TIME BIGINT NOT NULL,
            PRINCIPAL_NAME VARCHAR(100),
            CONSTRAINT SPRING_SESSION_PK PRIMARY KEY (PRIMARY_ID)
        );
        CREATE TABLE IF NOT EXISTS SPRING_SESSION_ATTRIBUTES (
            SESSION_PRIMARY_ID CHAR(36) NOT NULL,
            ATTRIBUTE_NAME VARCHAR(200) NOT NULL,
            ATTRIBUTE_BYTES BYTEA NOT NULL,
            CONSTRAINT SPRING_SESSION_ATTRIBUTES_PK PRIMARY KEY (SESSION_PRIMARY_ID, ATTRIBUTE_NAME)
        );"
    
    - name: Run integration tests
      run: |
        chmod +x ../scripts/ci-test.sh
        ../scripts/ci-test.sh
    
    - name: Stop application
      if: always()
      run: |
        if [ ! -z "$APP_PID" ]; then
          kill $APP_PID || true
        fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif' 